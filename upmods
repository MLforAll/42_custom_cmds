#!/bin/bash

# Shell Script by kdumarai to push projects to vogsphere!
# v1: Original version (28/08/17)
# v1.5: Fuses commit? and commit msg steps (unknown date)
# v2: Adds diffing (git rm --cached) support! (13/11/17)
# v3: Supports 2 remotes setups (personal and vogsphere)
# v3.5: Filters .o and .a
# v4: Now supports not providing a upfiles file (i.e pushing to github) and filters .dSYM
# v4.5: Filters prgm name from Makefile's NAME variable

# CLRS
BLACKCLR="\033[0;30m"
WHITECLR="\033[0;37m"
ORANGECLR="\033[0;33m"
REDCLR="\033[0;31m"
BLUECLR="\033[0;34m"
CYANCLR="\033[0;36m"
PURPLECLR="\033[0;35m"
GREENCLR="\033[0;32m"
DEFAULTCLR="\033[0;39m"

# FCTS
matene_msg()
{
	echo "Okay!"
	echo "You'll take care of that later!"
	echo "Mate ne!"
	exit 0
}

# My header
echo "######################################"
echo "#                                    #"
echo "#           --- upmods ---           #"
echo "#                                    #"
echo "#      GiT repos mgmt made easy!     #"
echo "#       kdumarai@student.42.fr       #"
echo "#                                    #"
echo "######################################"
printf \\n

# Input file?
if [ "$1" != "" ]; then
	inputFile="$1"
	inputFileFolderPath=`dirname "$inputFile"`
	cd $inputFileFolderPath
	inputFile=${inputFile#"$inputFileFolderPath/"}
fi

for r in $(git remote show)
do

	# Remote mode?
	rmode="unsupported"
	[ "$r" == "vogsphere" -o "$r" == "personal" ] && rmode="$r"
	[ "$rmode" == "unsupported" ] && [ "`git remote get-url origin | grep vogsphere`" != "" ] && rmode="vogsphere"
	[ "$rmode" == "unsupported" ] && [ "`git remote get-url origin | grep vogsphere`" == "" ] && rmode="personal"
	if [ "$rmode" == "unsupported" ]; then
		if [ "$r" == "origin" ]; then
			echo "${REDCLR}Undefined error!${DEFAULTCLR}"
		else
			echo "!! Remote ${REDCLR}$r${DEFAULTCLR} doesn't have any mode configured for it !!"
			echo "Rename ${REDCLR}$r${DEFAULTCLR} to github or vogsphere to fix this issue."
		fi
		exit 1
	fi
	printf "\033[1;36m" # BRIGHT CYAN
	echo "REMOTE: $r"
	echo "MODE: $rmode"
	printf "${DEFAULTCLR}\n"

	if [ -z "`klist 2> /dev/null`" ] && [ "$rmode" == "vogsphere" ]; then
		printf "\033[1;31mNo kerberos kickets available!${DEFAULTCLR}\n"
		read -p "Please enter your kusername: " kuser
		kinit "$kuser"
		if [ $? -ne 0 ]; then
			printf "\033[1;31mkinit failed!${DEFAULTCLR}\n"
			break
		else
			printf "\033[1;32mkinit OK!${DEFAULTCLR}\n\n"
		fi
	fi

	# Input file (vogsphere)?
	if [ "$1" == "" ] && [ "$rmode" == "vogsphere" ]; then
		while [ ! -f "$inputFile" ] && [ "$inputFile" != "abort" ]; do read -p "Where is located your input file? " inputFile; done
		if [ "$inputFile" == "abort" ]; then
			printf \\n
			echo "Okay, aborting..."
			exit 0
		fi
		printf \\n
	fi

	# git add stuff
	echo "Tracking files for commit ($rmode mode)"

	if [ "$rmode" == "vogsphere" ]; then
		totalFilesAdded=0
		while read line
		do
			if [ -f "$line" ]; then
				git add "$line" && (( totalFilesAdded++ ))
			else
				printf "${REDCLR}Error: $line: No such file!${DEFAULTCLR}\n"
			fi
		done < "$inputFile"
		newFileList="`cat "$inputFile"`"
	else
		newFileList="`find . \( -type f -o -type l \) | grep -v '\./\.git' | sed 's|\./||' | grep -v '\.DS_Store$' | grep -vi '^libft$' | grep -v '^\._' | grep -v '\.o$' | grep -v '\.dSYM$' | grep -v '\.a$'`"
		[ -f Makefile ] && [ ! -z "$(grep 'NAME[ ]\+=[a-zA-Z ]\+' Makefile)" ] && newFileList="`echo "$newFileList" | grep -v ^"$(grep 'NAME[ ]\+=[a-zA-Z ]\+' Makefile | awk '{print $3}')"`"
		totalFilesAdded=`echo "$newFileList" | wc -l`
		git add $newFileList
	fi

	if [ $totalFilesAdded -eq 0 ]; then
		echo "No files were added!"
		echo "You are either in the wrong folder, or there might be an issue with your repository"
		echo "By the way, your are here: $(pwd)"
		echo "Aborting..."
		sleep 1
		exit 1
	fi

	# git rm --cached stuff
	echo "Untracking files for commit (if files were removed locally -- $rmode mode)"

	for f in `git ls-files`
	do
		if [ "`echo "$newFileList" | grep "$f"`" == "" ]; then
			git rm --cached "$f" > /dev/null
		fi
	done
	printf \\n

	# git status?
	read -p "Do you want to see git status? (yes/anything) " qstatus
	[ "$qstatus" == "yes" ] && git status

	# git commit?
	read -p "Do you want to commit those changes? (commit msg/manual/no): " commitmsg
	if [ "$commitmsg" != "no" ]; then
		if [ "$commitmsg" == "manual" ]; then gitcommitArg=""; else gitcommitArg="-m"; fi
		git commit $gitcommitArg "$commitmsg"
		printf \\n

		# git push?
		read -p "Do you want to push? (yes/anything) " qpush
		if [ "$qpush" == "yes" ]; then
			git push "$r"
			printf \\n
		elif [ "$qpush" == "next" ]; then
			matene_msg
		fi
	elif [ "$commitmsg" != "next" ]; then
		matene_msg
	fi

done

# End of script
echo "Done!"
exit 0
